{"version":3,"sources":["service.js","actions/index.js","pages/Login.js","components/Header.js","components/Table.js","pages/Wallet.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","index.js"],"names":["getEconomia","a","fetch","then","response","json","date","catch","error","actionSaveInfo","info","coins","type","emailRegex","Login","validationEmail","value","target","setState","email","isValidationEmail","test","validationBtnClick","validatePassword","passwordLength","length","password","isValidationPass","state","validationBtn","saveUser","this","props","htmlFor","data-testid","onChange","name","to","onClick","disabled","React","Component","connect","dispatch","userAction","Header","handleUpdate","expenses","reduce","acc","cur","Number","exchangeRates","currency","ask","toFixed","requestCurrencies","user","wallet","arrObj","Object","keys","filter","coin","Table","prevDelete","map","id","description","tag","method","key","deleteLine","arrMethod","arrTag","Wallet","handleGeneric","saveInfoUser","saveInfo","currencies","selectCoins","selectMethod","selectTag","thunkGetCoin","App","path","component","Boolean","window","location","hostname","match","INITIAL_STATE","action","walletReducer","item","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.63f4ec59.chunk.js","sourcesContent":["const getEconomia = async () => {\n  const url = 'https://economia.awesomeapi.com.br/json/all';\n  return fetch(url)\n    .then((response) => response.json())\n    .then((date) => date)\n    .catch((error) => error);\n};\n\nexport default getEconomia;\n","import getEconomia from '../service';\n\n// Coloque aqui suas actions\nexport const NEW_USER = 'NEW_USER';\nexport const GET_CURRENCIES_SUCESS = 'GET_CURRENCIES_SUCESS';\nexport const GET_CURRENCIES_FAIL = 'GET_CURRENCIES_FAIL';\nexport const SAVE_INFO = 'SAVE_INFO';\nexport const DELETE_LINE = 'DELETE_LINE';\n\nexport const userAction = (email) => ({\n  type: NEW_USER,\n  email,\n});\n\nexport const actionGetEconomiaSucess = (date) => ({\n  type: GET_CURRENCIES_SUCESS,\n  date,\n});\n\nexport const actionGetEconomiaFail = (error) => ({\n  type: GET_CURRENCIES_FAIL,\n  error,\n});\n\nexport const thunkGetAPIEconomia = () => async (dispatch) => {\n  try {\n    const response = await getEconomia();\n    const arrObj = Object.keys(response).filter((coin) => coin !== 'USDT');\n    dispatch(actionGetEconomiaSucess(arrObj));\n  } catch (error) {\n    dispatch(actionGetEconomiaFail(error));\n  }\n};\n\nexport const actionSaveInfo = (info, coins) => ({\n  type: SAVE_INFO,\n  info,\n  coins,\n});\n\nexport const thunkGetCoin = (info) => async (dispatch) => {\n  try {\n    const response = await getEconomia();\n    dispatch(actionSaveInfo(info, response));\n  } catch (error) {\n    dispatch(actionSaveInfo(info, error));\n  }\n};\n\nexport const deleteLine = (id) => ({\n  type: DELETE_LINE,\n  id,\n});\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { userAction } from '../actions';\n\nconst MAX_LENGTH = 6;\nconst emailRegex = /\\S+@\\S+\\.\\S+/;\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      email: '',\n      password: '',\n      isValidationEmail: false,\n      isValidationPass: false,\n      validationBtn: true,\n    };\n  }\n\n  validationEmail = ({ target: { value } }) => {\n    this.setState({\n      email: value,\n      isValidationEmail: emailRegex.test(value),\n    });\n    this.validationBtnClick();\n  }\n\n  validatePassword = ({ target: { value } }) => {\n    const passwordLength = value.length;\n    this.setState({\n      password: value,\n      isValidationPass: MAX_LENGTH <= passwordLength,\n    }, () => this.validationBtnClick());\n  }\n\n  validationBtnClick = () => {\n    const { isValidationEmail, isValidationPass } = this.state;\n    this.setState({\n      validationBtn: !(isValidationEmail === true && isValidationPass === true),\n    });\n  }\n\n  render() {\n    const { saveUser } = this.props;\n    const { email, password, validationBtn } = this.state;\n    return (\n      <div>\n        <h2>Tela de Login</h2>\n        <label htmlFor=\"email\">\n          Email:\n          <input\n            type=\"email\"\n            data-testid=\"email-input\"\n            onChange={ this.validationEmail }\n            value={ email }\n            name=\"email\"\n          />\n        </label>\n        <label htmlFor=\"password\">\n          Senha:\n          <input\n            type=\"password\"\n            data-testid=\"password-input\"\n            onChange={ this.validatePassword }\n            value={ password }\n            name=\"password\"\n          />\n        </label>\n        <Link to=\"/carteira\">\n          <button\n            onClick={ () => saveUser(email) }\n            type=\"button\"\n            disabled={ validationBtn }\n          >\n            Entrar\n          </button>\n        </Link>\n      </div>\n    );\n  }\n}\n\nLogin.propTypes = {\n  saveUser: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  saveUser: (email) => dispatch(userAction(email)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { thunkGetAPIEconomia } from '../actions';\n\nclass Header extends React.Component {\n  componentDidMount() {\n    const { requestCurrencies } = this.props;\n    requestCurrencies();\n  }\n\n  handleUpdate = () => {\n    const { expenses } = this.props;\n    const totExpenses = expenses.reduce((acc, cur) => {\n      const sumCot = Number(cur.value * cur.exchangeRates[cur.currency].ask);\n      return sumCot + acc;\n    }, 0);\n    return totExpenses.toFixed(2);\n  }\n\n  render() {\n    const { email } = this.props;\n    return (\n      <div>\n        <p data-testid=\"email-field\">{`Email: ${email}`}</p>\n        <p data-testid=\"total-field\">{this.handleUpdate()}</p>\n        <p data-testid=\"header-currency-field\">BRL</p>\n      </div>\n    );\n  }\n}\n\nHeader.propTypes = {\n  email: PropTypes.string,\n  requestCurrencies: PropTypes.func,\n  expenses: PropTypes.array,\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  requestCurrencies: () => dispatch(thunkGetAPIEconomia()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { deleteLine } from '../actions';\n\nclass Table extends React.Component {\n  render() {\n    const { expenses, prevDelete } = this.props;\n    return (\n      <div>\n        <table>\n          <tbody>\n            <tr>\n              <th>Descrição</th>\n              <th>Tag</th>\n              <th>Método de pagamento</th>\n              <th>Valor</th>\n              <th>Moeda</th>\n              <th>Câmbio utilizado</th>\n              <th>Valor convertido</th>\n              <th>Moeda de conversão</th>\n              <th>Editar/Excluir</th>\n            </tr>\n            {\n              expenses.map(({\n                id, description, tag, method, value, currency,\n                exchangeRates,\n              }) => (\n                <tr key={ id }>\n                  <td>{description}</td>\n                  <td>{tag}</td>\n                  <td>{method}</td>\n                  <td>{Number(value).toFixed(2)}</td>\n                  <td>{exchangeRates[currency].name}</td>\n                  <td>{Number(exchangeRates[currency].ask).toFixed(2)}</td>\n                  <td>{Number(value * exchangeRates[currency].ask).toFixed(2)}</td>\n                  <td>Real</td>\n                  <td>\n                    <button\n                      data-testid=\"delete-btn\"\n                      type=\"button\"\n                      onClick={ () => prevDelete(id) }\n                    >\n                      Excluir\n                    </button>\n                  </td>\n                </tr>\n              ))\n            }\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nTable.propTypes = {\n  expenses: PropTypes.array,\n  prevDelete: PropTypes.func,\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  prevDelete: (id) => dispatch(deleteLine(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport Table from '../components/Table';\nimport { thunkGetCoin } from '../actions';\n\nconst arrMethod = ['Dinheiro', 'Cartão de crédito', 'Cartão de débito'];\nconst arrTag = ['Alimentação', 'Lazer', 'Trabalho', 'Transporte', 'Saúde'];\n\nclass Wallet extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      id: 0,\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheito',\n      tag: 'Alimentação',\n    };\n  }\n\n  handleGeneric = ({ target }) => {\n    const { name } = target;\n    this.setState({ [name]: target.value });\n  }\n\n  saveInfoUser = async () => {\n    const { id } = this.state;\n    const { saveInfo } = this.props;\n    this.setState({ id: id + 1 });\n    saveInfo(this.state);\n    this.setState({ value: '' });\n  }\n\n  render() {\n    const { currencies } = this.props;\n    const { value, description, currency, method, tag } = this.state;\n    return (\n      <div>\n        <Header />\n        <div>\n          <label htmlFor=\"value\">\n            Valor:\n            <input\n              data-testid=\"value-input\"\n              type=\"number\"\n              onChange={ this.handleGeneric }\n              value={ value }\n              name=\"value\"\n            />\n          </label>\n\n          <label htmlFor=\"description\">\n            Descrição:\n            <input\n              data-testid=\"description-input\"\n              type=\"text\"\n              onChange={ this.handleGeneric }\n              value={ description }\n              name=\"description\"\n            />\n          </label>\n\n          <label htmlFor=\"currency\">\n            Moeda:\n            <select\n              id=\"currency\"\n              value={ currency }\n              onChange={ this.handleGeneric }\n              name=\"currency\"\n              data-testid=\"currency-input\"\n            >\n              {\n                currencies.map((selectCoins) => (\n                  <option\n                    key={ selectCoins }\n                    value={ selectCoins }\n                  >\n                    {selectCoins}\n                  </option>\n                ))\n              }\n            </select>\n          </label>\n\n          <label\n            htmlFor=\"method\"\n          >\n            Método de pagamento:\n            <select\n              onChange={ this.handleGeneric }\n              value={ method }\n              name=\"method\"\n              data-testid=\"method-input\"\n              id=\"method\"\n            >\n              {\n                arrMethod.map((selectMethod) => (\n                  <option\n                    key={ selectMethod }\n                    value={ selectMethod }\n                  >\n                    {selectMethod}\n                  </option>\n                ))\n              }\n            </select>\n          </label>\n\n          <label htmlFor=\"tag\">\n            Tag:\n            <select\n              onChange={ this.handleGeneric }\n              value={ tag }\n              name=\"tag\"\n              data-testid=\"tag-input\"\n              id=\"tag\"\n            >\n              {\n                arrTag.map((selectTag) => (\n                  <option\n                    key={ selectTag }\n                    value={ selectTag }\n                  >\n                    {selectTag}\n                  </option>\n                ))\n              }\n            </select>\n          </label>\n          <button\n            type=\"button\"\n            onClick={ this.saveInfoUser }\n          >\n            Adicionar despesa\n          </button>\n        </div>\n        <Table />\n      </div>\n    );\n  }\n}\n\nWallet.propTypes = {\n  currencies: PropTypes.string,\n  saveInfo: PropTypes.func,\n}.isRequired;\n\nconst mapStateToProps = (state) => ({\n  currencies: state.wallet.currencies,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  saveInfo: (info) => dispatch(thunkGetCoin(info)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Switch>\n        <Route path=\"/carteira\" component={ Wallet } />\n        <Route path=\"*/\" component={ Login } />\n      </Switch>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { NEW_USER } from '../actions';\n\n// Esse reducer será responsável por tratar as informações da pessoa usuária\nconst INITIAL_STATE = {\n  email: '',\n};\n\nfunction user(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case NEW_USER:\n    return {\n      ...state,\n      email: action.email,\n    };\n  default:\n    return state;\n  }\n}\n\nexport default user;\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\nimport {\n  DELETE_LINE,\n  GET_CURRENCIES_FAIL,\n  GET_CURRENCIES_SUCESS,\n  SAVE_INFO,\n} from '../actions';\n\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n};\n\nconst walletReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case GET_CURRENCIES_SUCESS:\n    return { ...state, currencies: action.date };\n  case GET_CURRENCIES_FAIL:\n    return { ...state, error: action.error };\n  case SAVE_INFO:\n    return {\n      ...state,\n      expenses: [\n        ...state.expenses,\n        { ...action.info, exchangeRates: action.coins },\n      ],\n    };\n  case DELETE_LINE:\n    return {\n      ...state,\n      expenses: state.expenses.filter((item) => item.id !== action.id),\n    };\n  default:\n    return state;\n  }\n};\n\nexport default walletReducer;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\nconst rootReducer = combineReducers({\n  user,\n  wallet,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}